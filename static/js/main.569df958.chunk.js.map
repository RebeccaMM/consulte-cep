{"version":3,"sources":["actions/index.js","actions/actionTypes.js","components/Result.js","App.js","serviceWorker.js","reducers/clickReducer.js","reducers/index.js","store/index.js","index.js"],"names":["consultarCEP","cep","dispatch","axios","get","concat","then","response","type","lugar","data","catch","error","Result","this","props","react_default","a","createElement","className","logradouro","bairro","localidade","uf","Icon","name","Component","App","state","inputChange","event","_this","setState","target","value","_this$props","Input","onChange","Button","color","size","onClick","Result_Result","connect","store","clickState","bindActionCreators","Boolean","window","location","hostname","match","initialState","Reducers","combineReducers","arguments","length","undefined","action","Object","objectSpread","Store","applyMiddleware","thunk","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qRAWaA,EAAe,SAAAC,GACxB,OAAO,SAACC,GACJ,OAAOC,IAAMC,IAAN,4BAAAC,OAAsCJ,EAAtC,UACFK,KAAK,SAAAC,GACFL,EAVL,CACHM,KCN0B,qBDO1BC,MAQiCF,EAASG,SAErCC,MAAM,SAAAC,GACH,MAAOA,0CEZFC,0LACR,IACGJ,EAAUK,KAAKC,MAAfN,MAER,OACIA,GACIO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKT,EAAMW,YACVX,EAAMY,QAAWZ,EAAMY,OACxBL,EAAAC,EAAAC,cAAA,WACCT,EAAMa,YAAN,GAAAjB,OAAwBI,EAAMa,WAA9B,OAAAjB,OAA8CI,EAAMc,IACrDP,EAAAC,EAAAC,cAAA,WACCT,EAAMR,KAAQQ,EAAMR,KAEzBe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,KAAK,mBAhBCC,cCQ9BC,6MACFC,MAAQ,CACJ3B,IAAK,MAGT4B,YAAc,SAAAC,GACVC,EAAKC,SAAS,CACV/B,IAAK6B,EAAMG,OAAOC,iFAIjB,IAAAC,EAC2BrB,KAAKC,MAA7Bf,EADHmC,EACGnC,aAAcS,EADjB0B,EACiB1B,MAEdR,EAAQa,KAAKc,MAAb3B,IAER,OACIe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,MAEIH,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOjB,UAAU,QAAQX,KAAK,OAAO6B,SAAUvB,KAAKe,YAAaK,MAAOjC,IACxEe,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAQnB,UAAU,SAASoB,MAAM,OAAOC,KAAK,QAAQC,QAAS,kBAAMzC,EAAaC,KAAjF,YAKRe,EAAAC,EAAAC,cAACwB,EAAD,CAAQjC,MAAOA,YA5BbiB,aA2CHiB,cAPS,SAAAC,GAAK,MAAK,CAC9BnC,MAAOmC,EAAMC,WAAWpC,QAGD,SAAAP,GAAQ,OAC/B4C,YAAmB,CAAE9C,gBAAgBE,IAE1ByC,CAA6ChB,GC7CxCoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wECjBAC,EAAe,CACjB3C,MAAO,ICCE4C,EAAWC,YAAgB,CACpCT,WDAwB,WAAkC,IAAjCjB,EAAiC2B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBH,EAAcM,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC1D,OAAQC,EAAOlD,MACX,IJN0B,qBIOtB,OAAOmD,OAAAC,EAAA,EAAAD,CAAA,GACA/B,EADP,CAEInB,MAAOiD,EAAOjD,QAEtB,QACI,OAAOmB,eEPNiC,EAAQC,YAAgBC,IAAhBD,CAAuBE,IAAvBF,CAAoCT,GCGzDY,IAASC,OACLlD,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAAUvB,MAAOiB,GACb7C,EAAAC,EAAAC,cAACkD,EAAD,OAEFC,SAASC,eAAe,SJqHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnE,KAAK,SAAAoE,GACjCA,EAAaC","file":"static/js/main.569df958.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nimport { CLICK_UPDATE_VALUE } from './actionTypes';\r\n\r\nexport const getLugarSuccess = id => {\r\n    return {\r\n        type: CLICK_UPDATE_VALUE,\r\n        lugar: id\r\n    }\r\n}\r\n\r\nexport const consultarCEP = cep => {\r\n    return (dispatch) => {\r\n        return axios.get(`https://viacep.com.br/ws/${cep}/json`)\r\n            .then(response => {\r\n                dispatch(getLugarSuccess(response.data))\r\n            })\r\n            .catch(error => {\r\n                throw (error);\r\n            });\r\n    }\r\n};","export const CLICK_UPDATE_VALUE = 'CLICK_UPDATE_VALUE';","import React, { Component } from 'react';\r\n\r\nimport { Icon } from 'semantic-ui-react';\r\n\r\nimport '../App.css';\r\n\r\nexport default class Result extends Component {\r\n    render() {\r\n        const { lugar } = this.props;\r\n\r\n        return (\r\n            lugar && (\r\n                <div className=\"ResultContainer\">\r\n                    <div>\r\n                        <h2>{lugar.logradouro}</h2>\r\n                        {lugar.bairro && (lugar.bairro)}\r\n                        <br />\r\n                        {lugar.localidade && (`${lugar.localidade} - ${lugar.uf}`)}\r\n                        <br />\r\n                        {lugar.cep && (lugar.cep)}\r\n                    </div>\r\n                    <div className=\"CloseResult\">\r\n                        <Icon name='close' />\r\n                    </div>\r\n                </div>\r\n            )\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { consultarCEP } from './actions';\r\n\r\nimport { Button, Input } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nimport Result from './components/Result';\r\n\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    state = {\r\n        cep: ''\r\n    }\r\n\r\n    inputChange = event => {\r\n        this.setState({\r\n            cep: event.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { consultarCEP, lugar } = this.props;\r\n\r\n        const { cep } = this.state;\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <div className=\"Consult\">\r\n                    <h4>Consultar</h4>\r\n                    <div className=\"FormContainer\">\r\n                        CEP\r\n                        <Input className=\"Input\" type='text' onChange={this.inputChange} value={cep} />\r\n                        <Button className=\"Button\" color='blue' size=\"small\" onClick={() => consultarCEP(cep)}>\r\n                            Buscar\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <Result lugar={lugar} />\r\n\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = store => ({\r\n    lugar: store.clickState.lugar\r\n});\r\n\r\nconst mapDispatchToProps = dispatch =>\r\n    bindActionCreators({ consultarCEP }, dispatch);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CLICK_UPDATE_VALUE } from '../actions/actionTypes';\r\nconst initialState = {\r\n    lugar: {}\r\n};\r\nexport const clickReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CLICK_UPDATE_VALUE:\r\n            return {\r\n                ...state,\r\n                lugar: action.lugar\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};","import { clickReducer } from './clickReducer';\r\nimport { combineReducers } from 'redux';\r\n\r\nexport const Reducers = combineReducers({\r\n    clickState: clickReducer\r\n});","import { applyMiddleware, createStore } from 'redux';\r\nimport { Reducers } from '../reducers';\r\n\r\nimport thunk from 'redux-thunk';\r\n\r\nexport const Store = applyMiddleware(thunk)(createStore)(Reducers);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { Store } from './store';\n\nReactDOM.render(\n    <Provider store={Store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}